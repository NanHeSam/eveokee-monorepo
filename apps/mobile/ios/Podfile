require File.join(File.dirname(`node --print "require.resolve('expo/package.json')"`), "scripts/autolinking")
require File.join(File.dirname(`node --print "require.resolve('react-native/package.json')"`), "scripts/react_native_pods")

require 'json'
podfile_properties = JSON.parse(File.read(File.join(__dir__, 'Podfile.properties.json'))) rescue {}

def ccache_enabled?(podfile_properties)
  # Environment variable takes precedence
  return ENV['USE_CCACHE'] == '1' if ENV['USE_CCACHE']
  
  # Fall back to Podfile properties
  podfile_properties['apple.ccacheEnabled'] == 'true'
end

ENV['RCT_NEW_ARCH_ENABLED'] ||= '0' if podfile_properties['newArchEnabled'] == 'false'
ENV['EX_DEV_CLIENT_NETWORK_INSPECTOR'] ||= podfile_properties['EX_DEV_CLIENT_NETWORK_INSPECTOR']
ENV['RCT_USE_RN_DEP'] ||= '1' if podfile_properties['ios.buildReactNativeFromSource'] != 'true' && podfile_properties['newArchEnabled'] != 'false'
ENV['RCT_USE_PREBUILT_RNCORE'] ||= '1' if podfile_properties['ios.buildReactNativeFromSource'] != 'true' && podfile_properties['newArchEnabled'] != 'false'
platform :ios, podfile_properties['ios.deploymentTarget'] || '15.1'

prepare_react_native_project!

target 'diaryvibes' do
  use_expo_modules!

  if ENV['EXPO_USE_COMMUNITY_AUTOLINKING'] == '1'
    config_command = ['node', '-e', "process.argv=['', '', 'config'];require('@react-native-community/cli').run()"];
  else
    config_command = [
      'npx',
      'expo-modules-autolinking',
      'react-native-config',
      '--json',
      '--platform',
      'ios'
    ]
  end

  config = use_native_modules!(config_command)

  use_frameworks! :linkage => podfile_properties['ios.useFrameworks'].to_sym if podfile_properties['ios.useFrameworks']
  use_frameworks! :linkage => ENV['USE_FRAMEWORKS'].to_sym if ENV['USE_FRAMEWORKS']

  use_react_native!(
    :path => config[:reactNativePath],
    :hermes_enabled => podfile_properties['expo.jsEngine'] == nil || podfile_properties['expo.jsEngine'] == 'hermes',
    # An absolute path to your application root.
    :app_path => "#{Pod::Config.instance.installation_root}/..",
    :privacy_file_aggregation_enabled => podfile_properties['apple.privacyManifestAggregationEnabled'] != 'false',
  )

  post_install do |installer|

    react_native_post_install(
      installer,
      config[:reactNativePath],
      :mac_catalyst_enabled => false,
      :ccache_enabled => ccache_enabled?(podfile_properties),
    )
  

  # ---- Folly & C++ standard hardening (Expo plugin) -------------------------
  installer.pods_project.targets.each do |t|
    t.build_configurations.each do |c|
      # Preprocessor macros: disable Folly coroutines and enforce libc++
      defs = c.build_settings['GCC_PREPROCESSOR_DEFINITIONS']
      defs = ['$(inherited)'] if defs.nil?
      defs = defs.is_a?(Array) ? defs : defs.to_s.split(/\s+/)

      # Disable coroutines and assert Apple time APIs exist
      [
        'FOLLY_HAS_COROUTINES=0',
        'FOLLY_CFG_NO_COROUTINES=1',
        'FOLLY_NO_CONFIG=1',
        'FOLLY_MOBILE=1',
        'FOLLY_USE_LIBCPP=1',
        'HAVE_CLOCK_GETTIME=1',
        'FOLLY_HAVE_CLOCK_GETTIME=1'
      ].each do |d|
        defs << d unless defs.include?(d)
      end
      c.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] = defs.uniq

      # Force C++20
      c.build_settings['CLANG_CXX_LANGUAGE_STANDARD'] = 'gnu++20'
      c.build_settings['CLANG_CXX_LIBRARY'] = 'libc++'

      # Strip any -std=gnu++17 stragglers
      %w[OTHER_CPLUSPLUSFLAGS OTHER_CFLAGS].each do |k|
        v = c.build_settings[k]
        next if v.nil?
        v = v.is_a?(Array) ? v : v.to_s.split(/\s+/)
        v = v.map { |f| f.gsub(/-std=gnu\+\+17/, '') }
        c.build_settings[k] = v
      end
    end
  end
  # --------------------------------------------------------------------------
end
end
